	package com.example.demo.controller;
	
	import com.example.demo.model.Company;
	import com.example.demo.service.CompanyService;
	import org.bson.types.ObjectId;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.http.ResponseEntity;
	import org.springframework.web.bind.annotation.*;
	
	import java.util.List;
	
	@RestController
	@RequestMapping("/api")
	public class CompanyController {
	
	    @Autowired
	    private CompanyService companyService;
	
	    @GetMapping("/companies")
	    public ResponseEntity<List<Company>> getAllCompanies() {
	        List<Company> companies = companyService.getAllCompanies();
	        return ResponseEntity.ok(companies);
	    }
	
	    @GetMapping("/company/{companyid}")
	    public ResponseEntity<Company> getCompanyById(@PathVariable String companyid) {
	        if (!ObjectId.isValid(companyid)) {
	            return ResponseEntity.badRequest().body(null); // Invalid ID format
	        }
	
	        Company company = companyService.getCompanyById(companyid);
	        if (company != null) {
	            return ResponseEntity.ok(company);
	        }
	        return ResponseEntity.notFound().build();
	    }
	
	    @PostMapping("/company")
	    public ResponseEntity<Company> createCompany(@RequestBody Company company) {
	        if (company == null || company.getCompanyid() == null) {
	            return ResponseEntity.badRequest().body(null); // Missing required fields
	        }
	        Company createdCompany = companyService.createCompany(company);
	        return ResponseEntity.ok(createdCompany);
	    }
	
	    @PutMapping("/company/{companyid}")
	    public ResponseEntity<Company> updateCompany(@PathVariable String companyid, @RequestBody Company company) {
	        if (!ObjectId.isValid(companyid)) {
	            return ResponseEntity.badRequest().body(null); // Invalid ID format
	        }
	
	        Company updatedCompany = companyService.updateCompany(companyid, company);
	        if (updatedCompany != null) {
	            return ResponseEntity.ok(updatedCompany);
	        }
	        return ResponseEntity.notFound().build();
	    }
	
	    @DeleteMapping("/company/{companyid}")
	    public ResponseEntity<Void> deleteCompany(@PathVariable String companyid) {
	        if (!ObjectId.isValid(companyid)) {
	            return ResponseEntity.badRequest().build(); // Invalid ID format
	        }
	
	        boolean isDeleted = companyService.deleteCompany(companyid);
	        if (isDeleted) {
	            return ResponseEntity.noContent().build();
	        }
	        return ResponseEntity.notFound().build();
	    }
	}
